// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array screen; // Screen array
    static Array twoPowers;   // hold the values of 2^i (i = 0,...,15)
    static Array masks;    // hold the mask up to i-th bit (ex: mask[2] = 0000 0111) 
    static boolean color; // false (0): white, true (-1): black

    /** Initializes the Screen. */
    function void init() {
        var int i;
        let color = true;   // set color to black

        // Initialize screen array
        // Screen memory: 8192 registers (RAM 16384 -> RAM 24575)
        let screen = 16384;

        // Initialize 2^i array and the masks array
        let twoPowers = Array.new(16);
        let masks = Array.new(16);

        let twoPowers[0] = 1;
        let masks[0] = 1;

        let i = 1;
        while (i < 16) {
            // 2^i = 2 * 2^(i-1)
            let twoPowers[i] = twoPowers[i - 1] + twoPowers[i - 1];
            // 0000 1111 = 0000 1000 + 0000 0111
            let masks[i] = twoPowers[i] + masks[i - 1];
            let i = i + 1;
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        let color = false;   
        do Screen.drawRectangle(0, 0, 511, 255);
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Check if the coordinates is invalid */
    function boolean illegalCoord(int x, int y) {
        return (x < 0) | (x > 511) | (y < 0) | (y > 255);
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        // x: 0 -> 511; y: 0 -> 255
        var int address, value, temp;
        if (Screen.illegalCoord(x, y)) {
            do Sys.error(7);    // illegal pixel coordinates
        }

        let temp = x / 16;
        let address = (32 * y) + temp; // 32y + x/16
        let value = screen[address];
        
        // Set the (x % 16) bit of current register to color
        if (color) { // black
            let screen[address] = value | twoPowers[x - (temp * 16)];
        } else { // white
            let screen[address] = value & (~twoPowers[x - (temp * 16)]);
        }
        return;
    }

    /** Draws a horizontal line from (x1,y) to (x2,y). */
    // Try to draw 16 pixels at a time (except for start and end registers)
    // Special case: 2 pixels are on the same addresses
    function void drawHorizontalLine(int y, int x1, int x2) {
        var int temp1, temp2, i1, i2;
        var int startAddress, address, endAddress;
        var int startMask, endMask;
        let temp1 = 32 * y;

        let temp2 = x1 / 16;
        let startAddress = temp1 + temp2;
        let i1 = x1 - (temp2 * 16);

        let temp2 = x2 / 16;
        let endAddress = temp1 + temp2; 
        let i2 = x2 - (temp2 * 16);

        if (startAddress = endAddress) {    // 2 pixels on the same address
            let startMask = masks[i2] - masks[i1];
            if (color) {
                let screen[startAddress] = screen[startAddress] | startMask;
            } else {
                let screen[startAddress] = screen[startAddress] & (~startMask);
            }
            return;
        }

        if (i1 = 0) {
            let startMask = 0;
        } else {
            let startMask = masks[i1 - 1];
        }
        if (color) {
            let startMask = ~startMask;
        }
        
        let endMask = masks[i2];
        if (~color) {
            let endMask = ~endMask;
        }

        if (color) {
            let screen[startAddress] = screen[startAddress] | startMask;
            let screen[endAddress] = screen[endAddress] | endMask;
        } else {
            let screen[startAddress] = screen[startAddress] & startMask;
            let screen[endAddress] = screen[endAddress] & endMask;
        }

        // in-between registers
        let address = startAddress + 1;
        while (address < endAddress) {
            let screen[address] = color;
            let address = address + 1;
        }
        return;
    }

    /** Repeatedly draws a horizontal line from (x1,y) to (x2,y). */
    // Used to drawRectangle
    // y ranges from y1 to y2 (y1 < y2) => repeat: y2 - y1 + 1
    // startMask and endMask can be calculated once and use across rows
    // startAddress and endAddress are increased by 32 each time
    function void drawHorizontalLineRepeat(int y, int x1, int x2, int repeat) {
        var int temp1, temp2, i1, i2, lineIndex;
        var int startAddress, address, endAddress;
        var int startMask, endMask;
        let temp1 = 32 * y;

        let temp2 = x1 / 16;
        let startAddress = temp1 + temp2;
        let i1 = x1 - (temp2 * 16);

        let temp2 = x2 / 16;
        let endAddress = temp1 + temp2; 
        let i2 = x2 - (temp2 * 16);

        if (startAddress = endAddress) {    // 2 pixels on the same address
            let startMask = masks[i2] - masks[i1];
            let lineIndex = 0;
            while (lineIndex < repeat) {
                if (color) {
                    let screen[startAddress] = screen[startAddress] | startMask;
                } else {
                    let screen[startAddress] = screen[startAddress] & (~startMask);
                }

                let lineIndex = lineIndex + 1;
                let startAddress = startAddress + 32;
            }
            return;
        }

        if (i1 = 0) {
            let startMask = 0;
        } else {
            let startMask = masks[i1 - 1];
        }
        if (color) {
            let startMask = ~startMask;
        }
        
        let endMask = masks[i2];
        if (~color) {
            let endMask = ~endMask;
        }

        let lineIndex = 0;
        while (lineIndex < repeat) {
            if (color) {
                let screen[startAddress] = screen[startAddress] | startMask;
                let screen[endAddress] = screen[endAddress] | endMask;
            } else {
                let screen[startAddress] = screen[startAddress] & startMask;
                let screen[endAddress] = screen[endAddress] & endMask;
            }

            let address = startAddress + 1;
            while (address < endAddress) {
                let screen[address] = color;
                let address = address + 1;
            }

            let lineIndex = lineIndex + 1;
            let startAddress = startAddress + 32;
            let endAddress = endAddress + 32;
        }
        return;
    }

    /** Draws a vertical line from (x,y1) to (x,y2) with y1 < y2. */
    // The next pixel will be right below current pixel.
    // So address = address + 32, and mask will be the same.
    function void drawVerticalLine(int x, int y1, int y2) {
        var int address, temp, mask, y;
        let temp = x / 16;
        let mask = twoPowers[x - (temp * 16)];
        if (~color) {
            let mask = ~mask;
        }
        let y = y1;
        let address = (32 * y1) + temp;

        while (~(y > y2)) {
            // Set the (x % 16) bit of current register to color
            if (color) { // black
                let screen[address] = screen[address] | mask;
            } else { // white
                let screen[address] = screen[address] & mask;
            }
            let y = y + 1;
            let address = address + 32;
        }
        return;
    }

    /* To decide which direction to go, we compare the angles
       tan(alpha) = dy / dx (fixed)
       tan(beta) = b / a (change over time)
       diff = b.dx - a.dy
       Try to make diff goes to 0 in every move)
       If diff = 0, choose b direction (arbitrary)
       a = a + 1 => diff = b.dx - a.dy - dy = prevDiff - dy
       b = b + 1 => diff = b.dx + dx - a.dy = prevDiff + dx
       In case y1 > y2, we need to move in -b direction. */

    /** Draws a diagonal line from (x1,y1) to (x2,y2) when y1 < y2 */
    function void drawNorthWestSouthEast(int x1, int y1, int x2, int y2) {
        var int dx, dy;
        var int a, b;   // current x, y offsets
        var int diff;   // b.dx - a.dy

        let dx = x2 - x1;
        let dy = y2 - y1;
        let a = 0;
        let b = 0;
        let diff = 0;

        while((~(a > dx)) & (~(b > dy))) {
            do Screen.drawPixel(x1 + a, y1 + b);    // move right and down

            // Decide which direction to go
            if (diff > 0) {
                let a = a + 1;
                let diff = diff - dy;
            } else {
                let b = b + 1;
                let diff = diff + dx;
            }
        }
        return;
    }

    /** Draws a diagonal line from (x1,y1) to (x2,y2) when y1 > y2 */
    function void drawSouthWestNorthEast(int x1, int y1, int x2, int y2) {
        var int dx, dy;
        var int a, b;   // current x, y offsets
        var int diff;   // b.dx - a.dy

        let dx = x2 - x1;
        let dy = y1 - y2;
        let a = 0;
        let b = 0;
        let diff = 0;

        while((~(a > dx)) & (~(b > dy))) {
            do Screen.drawPixel(x1 + a, y1 - b);    // move right and up

            // Decide which direction to go
            if (diff > 0) {
                let a = a + 1;
                let diff = diff - dy;
            } else {
                let b = b + 1;
                let diff = diff + dx;
            }
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        if (Screen.illegalCoord(x1, y1) | Screen.illegalCoord(x2, y2)) {
            do Sys.error(8);    // illegal line coordinates
        }

        // Make sure the first end is on the left
        if (x1 > x2) {
            do Screen.drawLine(x2, y2, x1, y1);
            return;
        }

        // Draw horizontal line
        if (y1 = y2) {
            if (x1 = x2) {  // same coordinates
                do Sys.error(8);    // illegal line coordinates
            }
            do Screen.drawHorizontalLine(y1, x1, x2);
            return;
        }

        // Draw vertical line
        if (x1 = x2) {
            if (y1 = y2) {  // same coordinates
                do Sys.error(8);    // illegal line coordinates
            }
            if (y2 > y1) {
                do Screen.drawVerticalLine(x1, y1, y2);
            } else {    // y2 < y1
                do Screen.drawVerticalLine(x1, y2, y1);
            }
            return;
        }

        // Draw diagonals
        if (y2 > y1) {
            do Screen.drawNorthWestSouthEast(x1, y1, x2, y2);
        } else {    // y2 < y1
            do Screen.drawSouthWestNorthEast(x1, y1, x2, y2);
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        if (Screen.illegalCoord(x1, y1) | Screen.illegalCoord(x2, y2)) {
            do Sys.error(9);    // illegal rectangle coordinates
        }
        if ((~(x2 > x1)) & (~(y2 > y1))) {
            do Sys.error(9);    // illegal rectangle coordinates
        }

        // draw horizontal line N times
        do Screen.drawHorizontalLineRepeat(y1, x1, x2, y2 - y1 + 1);
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, dx, rSquare;
        if (Screen.illegalCoord(x, y)) {
            do Sys.error(12);   // illegal center coordinates
        }
        if ((r < 0) | (r > 181)) {
            do Sys.error(13);   // illegal radius
        }

        do Screen.drawPixel(x, y - r);
        do Screen.drawPixel(x, y + r);
        do Screen.drawHorizontalLine(y, x - r, x + r);

        let rSquare = r*r;
        let dy = r - 1;    
        while (dy > 0) {
            let dx = Math.sqrt(rSquare - (dy*dy));
            do Screen.drawHorizontalLine(y - dy, x - dx, x + dx);
            do Screen.drawHorizontalLine(y + dy, x - dx, x + dx);
            let dy = dy - 1;
        }
        return;
    }
}
