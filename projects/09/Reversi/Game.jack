class Game {
    field int size; // board size
    field Board board;  // main game board
    field int turn; // current turn: white or black 
    field int countTile; // number of tiles on the board
    field int result; // store game result

    /** Construct a new Game */
    constructor Game new() {
        do initialize();
        return this;
    }

    /** Initialization */
    method void initialize() {
        let size = 8;
        let board = Board.new(size); // construct a board
        let turn = 1; // white tile goes first
        let countTile = 4;  // 4 initial tiles
        let result = -5; // this is just a random value
        do printInstructions();
        do showTurn();
        return;
    }

    /** Dispose this game object */
    method void dispose() {
        do board.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Swap turn */
    method void swapTurn() {
        let turn = board.getOtherTile(turn);
        return;
    }

    /** Run game: check for move and update board */
    method void run() {
        var char key;   // store current key pressed
        var int direction;  // select box moving direction 
        var boolean select, selectSuccess; // user selected a cell
        var boolean exit, reset;    // whether to reset or exit the game
        let exit = false;
        
        while (~exit) {
            let reset = false;
            let direction = 0;
            let select = false;
            let selectSuccess = false;

            // Wait for a key to be pressed
            while (key = 0) {
                let key = Keyboard.keyPressed();
            }

            if (key = 90) { let reset = true; }     // z
            if (key = 88) { let exit = true; }      // x
            if (key = 32) { let select = true; }    // space
            if (key = 131) { let direction = 1; }   // up arrow
            if (key = 133) { let direction = 2; }   // down arrow
            if (key = 130) { let direction = 3; }   // left arrow
            if (key = 132) { let direction = 4; }   // right arrow

            // Move the select box
            if (~(direction = 0)) {
                do board.moveBox(direction);
            }

            // Select current cell
            if (select) {
                let selectSuccess = board.selectCell(turn);
            }

            // Check if the board is full and get final result
            if (selectSuccess) {
                let countTile = countTile + 1;
                if (countTile = (size * size)) {
                    let result = board.getResult();
                }
            }

            // Show result and reset game after 3 seconds
            if (~(result = -5)) {
                do showResult();
                do Sys.wait(3000);
                do Screen.clearScreen();
                do resetGame();
            }

            // Swap turn if select successful and game is not end
            if (selectSuccess & (result = -5)) {
                do swapTurn();
                do drawTile();
            }

            // Reset the game
            if (reset) {
                do resetGame();
            }

            // Wait for the key to be released
            while (~(key = 0)) {
                let key = Keyboard.keyPressed();
            }
        }
        return;
    }

    /** Reset current round */
    method void resetGame() {
        do board.erase();
        do board.dispose();
        do initialize();
        return;
    }

    /** Print instructions */
    method void printInstructions() {
        do Output.moveCursor(2, 35);
        do Output.printString("arrow keys: move");
        do Output.moveCursor(4, 35);
        do Output.printString("space: select a cell");
        do Output.moveCursor(6, 35);
        do Output.printString("z: reset the game");
        do Output.moveCursor(8, 35);
        do Output.printString("x: exit the game");
        return;
    }

    /** Show current turn */
    method void showTurn() {
        do Output.moveCursor(11, 40);
        do Output.printString("Turn: ");
        do drawTile();
        return;
    }

    /** Draw a tile */
    method void drawTile() {
        var int centerX, centerY;
        let centerX = 380;
        let centerY = 125;

        do Screen.setColor(true);
        do Screen.drawCircle(centerX, centerY, 10);

        if (turn = 1) { // white
            do Screen.setColor(false);
            do Screen.drawCircle(centerX, centerY, 8);
        }
        return;
    }

    /** Show result */
    method void showResult() {
        do Output.moveCursor(14, 40);
        if (result = 1) {
            do Output.printString("White won!");
        }
        if (result = 0) {
            do Output.printString("Black won!");
        }
        if (result = -1) {
            do Output.printString("Tie!");
        }
        do Output.moveCursor(16, 35);
        do Output.printString("Reset in 3 seconds...");
        return;
    }
}