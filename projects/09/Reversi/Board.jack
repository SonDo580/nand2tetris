class Board {
  field int size; // number of cells per side
  field int cellWidth; // the width of a cell
  field int x, y; // top-left corner coordinate of the board
  field Array2D content;  // content of the board
  field int currentRow, currentCol; // row and column of the select box
  field Array2D directions; // store 8 directions for checking

  /** Construct a new board with the given size */
  constructor Board new(int Asize) {
    let size = Asize;
    let content = Array2D.new(size, size);
    let x = 20;
    let y = 10;
    let cellWidth = (256 - (2*y)) / size;
    let currentRow = 0;
    let currentCol = 0;
    do setDirections();
    do initilize();
    do draw();
    return this;
  }

  /** Initilize the board with 4 tiles at the center */
  method void initilize() {
    var int i;
    let i = (size / 2) - 1;
    do content.set(i, i, 0);      // black
    do content.set(i, i+1, 1);    // white
    do content.set(i+1, i, 1);    // white
    do content.set(i+1, i+1, 0);  // black
    return;
  }

  /** Initialize directions array 
    [
      [0, -1], [0, 1], [-1, 0], [1, 0], [-1, -1], [1, -1], [-1, 1], [1, 1]
    ]
  */
  method void setDirections() {
    let directions = Array2D.new(2, 8);
    // up
    do directions.set(0, 0, 0);
    do directions.set(0, 1, -1);
    // down
    do directions.set(1, 0, 0);
    do directions.set(1, 1, 1);
    // left
    do directions.set(2, 0, -1);
    do directions.set(2, 1, 0);
    // right
    do directions.set(3, 0, 1);
    do directions.set(3, 1, 0);
    // up-left
    do directions.set(4, 0, -1);
    do directions.set(4, 1, -1);
    // up-right
    do directions.set(5, 0, 1);
    do directions.set(5, 1, -1);
    // down-left
    do directions.set(6, 0, -1);
    do directions.set(6, 1, 1);
    // down-right
    do directions.set(7, 0, 1);
    do directions.set(7, 1, 1);
    return;
  }

  /** Dispose this board */
  method void dispose() {
    do content.dispose();
    do directions.dispose();
    do Memory.deAlloc(this);
    return;
  }

  /** Move the select box */
  method void moveBox(int direction) {
    // Erase the old box
    do drawBox(true);

    // Move up
    if ((direction = 1) & (currentRow > 0)) {
      let currentRow = currentRow - 1;
    } 
    // Move down
    if ((direction = 2) & (currentRow < (size - 1))) {
      let currentRow = currentRow + 1;
    } 
    // Move left
    if ((direction = 3) & (currentCol > 0)) {
      let currentCol = currentCol - 1;
    } 
    // Move right
    if ((direction = 4) & (currentCol < (size - 1))) {
      let currentCol = currentCol + 1;
    }

    // Draw the new box
    do drawBox(false);
    return;
  }

  /** Get opposing tile */
  method int getOtherTile(int tile) {
    if (tile = 1) {
      return 0;   // tile: white -> otherTile: black
    } else {
      return 1;   // tile: black -> otherTile: white
    }
  }

  /** Select a cell */
  method boolean selectCell(int tile) {
    // Only allow if current cell is empty
    if (~(content.get(currentRow, currentCol) = -1)) { 
      return false;
    }

    // Update board
    do update(currentRow, currentCol, tile);
    // Erase and redraw board
    do erase();
    do draw();
    return true;
  }

  /** Update board after each move */
  method void update(int row, int col, int tile) {
    var int otherTile;
    let otherTile = getOtherTile(tile);

    // Place the tile at current cell
    do content.set(row, col, tile);
    // Flip the opposing tiles
    do flipTiles(row, col, tile, otherTile);
    return;
  }

  /** Check if we are still on the board */
  method boolean onBoard(int row, int col) {
    return (~(row < 0)) & (row < size) & (~(col < 0)) & (col < size);
  }

  /** Flip other tiles that are between 2 tiles */
  method void flipTiles(int startRow, int startCol, int tile, int otherTile) {
    var int i;
    var int row, col; // current row and col
    var int rowChange, colChange; // how much to move
    var int countOther; // count other tiles on the path
    var boolean shouldFlip;  // there are tiles to flipped
    var boolean shouldBreak;  // stop checking

    let i = 0;
    while (~(i = 8)) {
      let rowChange = directions.get(i, 0);
      let colChange = directions.get(i, 1);
      let row = startRow + rowChange;
      let col = startCol + colChange;
      let shouldFlip = false;
      let shouldBreak = false;
      let countOther = 0;

      // Keep going in this direction
      while ((~shouldBreak) & onBoard(row, col)) {
        if (content.get(row, col) = otherTile) {
          let countOther = countOther + 1;
          let row = row + rowChange;
          let col = col + colChange; 
        }

        if (onBoard(row, col)) {
          // Encounter an empty cell
          if ((content.get(row, col) = -1)) {
            let shouldBreak = true;
          }

          // Encounter another tile
          if (content.get(row, col) = tile) {
            let shouldBreak = true;
            // Check if there are other tiles in between
            if (countOther > 0) {
              let shouldFlip = true;   
            }
          }
        }
      }

      // If there are tiles to flipped
      if (shouldFlip) {
        // Go in the reverse direction to the original cell
        // Flip all other tiles along the way
        while (~((row = startRow) & (col = startCol))) {
          let row = row - rowChange;
          let col = col - colChange; 
          do content.set(row, col, tile);
        }
      }

      let i = i + 1;
    }
    return;
  }

  /** Get final result */
  method int getResult() {
    var int i, j;
    var int whiteCount, blackCount;
    let whiteCount = 0;
    let blackCount = 0;

    let i = 0;
    while (i < size) {
      let j = 0;
      while (j < size) {
          if (content.get(i, j) = 0) {
            let blackCount = blackCount + 1;
          } else {
            let whiteCount = whiteCount + 1;
          }
          let j = j + 1;
      }
      let i = i + 1;
    }

    if (whiteCount > blackCount) {
      return 1; // white won
    }
    if (whiteCount < blackCount) {
      return 0; // black won
    }
    return -1;  // tie
  }

  /** Draw the board on the screen */
  method void draw() {
    var int i;
    let i = 0;
    do Screen.setColor(true);
    
    while (~(i > size)) {
      // Draw vertical lines
      do Screen.drawLine(x + (i*cellWidth), y, x + (i*cellWidth), y + (size*cellWidth));
      // Draw horizontal lines
      do Screen.drawLine(x, y + (i*cellWidth), x + (size*cellWidth), y + (i*cellWidth));
      let i = i + 1;
    }

    // Draw the tiles
    do drawTiles();
    // Draw the selecting box;
    do drawBox(false);
    return;
  }

  /** Draw all tiles on the screen */
  method void drawTiles() {
    var int i, j;
    var int tile;
    let i = 0;

    while (i < size) {
      let j = 0;
      while (j < size) {
        let tile = content.get(i, j);
        if (~(tile = -1)) { // not empty
          do drawTile(i, j, tile);
        }
        let j = j + 1;
      }
      let i = i + 1;
    }
    return;
  }

  /** Draw a tile on the screen */
  method void drawTile(int row, int col, int tile) {
    var int centerX, centerY;
    let centerX = getCenterX(col);
    let centerY = getCenterY(row);

    do Screen.setColor(true);
    do Screen.drawCircle(centerX, centerY, (cellWidth / 2) - 4);

    if (tile = 1) { // white
      do Screen.setColor(false);
      do Screen.drawCircle(centerX, centerY, (cellWidth / 2) - 6);
    }
    return;
  }

  /** Get the tile center x-coordinate */
  method int getCenterX(int col) {
    return x + (col * cellWidth) + (cellWidth / 2);
  }

  /** Get the tile center y-coordinate */
  method int getCenterY(int row) {
    return y + (row * cellWidth) + (cellWidth / 2);
  }

  /** Draw or erase the selecting box */
  method void drawBox(boolean erase) {
    var int x1, x2, y1, y2;
    do Screen.setColor(erase);

    // Calculate coordinates
    let x1 = x + (currentCol * cellWidth);       // left
    let x2 = x + ((currentCol + 1) * cellWidth); // right
    let y1 = y + (currentRow * cellWidth);       // top
    let y2 = y + ((currentRow + 1) * cellWidth); // bottom 

    // Draw a short line around each side's midpoint
    do Screen.drawLine(x1, ((y1+y2)/2)-1, x1, ((y1+y2)/2)+1); // left
    do Screen.drawLine(x2, ((y1+y2)/2)-1, x2, ((y1+y2)/2)+1); // right
    do Screen.drawLine(((x1+x2)/2)-1, y1, ((x1+x2)/2)+1, y1); // top
    do Screen.drawLine(((x1+x2)/2)-1, y2, ((x1+x2)/2)+1, y2); // bottom
    return;
  }

  /** Erase the board from the screen */
  method void erase() {
    do Screen.setColor(false);
    do Screen.drawRectangle(x, y, x + (size*cellWidth), y + (size*cellWidth));
    return;
  }
}